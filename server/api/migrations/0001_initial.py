# Generated by Django 5.1.5 on 2025-08-10 11:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('hindi', 'Hindi'), ('english', 'English'), ('assamese', 'Assamese'), ('bengali', 'Bengali'), ('gujarati', 'Gujarati'), ('kannada', 'Kannada'), ('kashmiri', 'Kashmiri'), ('konkani', 'Konkani'), ('malayalam', 'Malayalam'), ('manipuri', 'Manipuri'), ('marathi', 'Marathi'), ('nepali', 'Nepali'), ('odia', 'Odia'), ('punjabi', 'Punjabi'), ('sanskrit', 'Sanskrit'), ('sindhi', 'Sindhi'), ('tamil', 'Tamil'), ('telugu', 'Telugu'), ('urdu', 'Urdu'), ('bodo', 'Bodo'), ('santhali', 'Santhali'), ('maithili', 'Maithili'), ('dogri', 'Dogri'), ('bhojpuri', 'Bhojpuri'), ('magahi', 'Magahi'), ('awadhi', 'Awadhi'), ('haryanvi', 'Haryanvi'), ('rajasthani', 'Rajasthani'), ('tulu', 'Tulu'), ('kodava', 'Kodava'), ('garo', 'Garo'), ('khasi', 'Khasi'), ('mizo', 'Mizo'), ('nagamese', 'Nagamese'), ('arabic', 'Arabic'), ('french', 'French'), ('german', 'German'), ('spanish', 'Spanish'), ('portuguese', 'Portuguese'), ('chinese', 'Chinese'), ('japanese', 'Japanese'), ('korean', 'Korean'), ('russian', 'Russian'), ('italian', 'Italian'), ('dutch', 'Dutch'), ('swedish', 'Swedish'), ('norwegian', 'Norwegian'), ('danish', 'Danish'), ('thai', 'Thai'), ('vietnamese', 'Vietnamese'), ('indonesian', 'Indonesian'), ('malay', 'Malay'), ('persian', 'Persian'), ('turkish', 'Turkish'), ('hebrew', 'Hebrew'), ('swahili', 'Swahili'), ('greek', 'Greek'), ('other', 'Other')], max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='MatchMaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'api_matchmaker',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('role', models.CharField(choices=[('user', 'User'), ('matchmaker', 'Matchmaker'), ('admin', 'Admin')], default='user', max_length=128)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('height', models.FloatField(blank=True, help_text='Height in meters (e.g., 1.75)', null=True, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(3.0)])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('undergraduate_college', models.CharField(blank=True, max_length=200, null=True)),
                ('degree', models.CharField(blank=True, choices=[('btech', 'B.Tech'), ('be', 'B.E.'), ('btech_cse', 'B.Tech Computer Science'), ('btech_ece', 'B.Tech Electronics & Communication'), ('btech_eee', 'B.Tech Electrical & Electronics'), ('btech_mech', 'B.Tech Mechanical'), ('btech_civil', 'B.Tech Civil'), ('btech_chemical', 'B.Tech Chemical'), ('btech_it', 'B.Tech Information Technology'), ('bsc', 'B.Sc.'), ('bsc_physics', 'B.Sc. Physics'), ('bsc_chemistry', 'B.Sc. Chemistry'), ('bsc_mathematics', 'B.Sc. Mathematics'), ('bsc_biology', 'B.Sc. Biology'), ('bsc_botany', 'B.Sc. Botany'), ('bsc_zoology', 'B.Sc. Zoology'), ('bsc_microbiology', 'B.Sc. Microbiology'), ('bsc_biotechnology', 'B.Sc. Biotechnology'), ('bsc_cs', 'B.Sc. Computer Science'), ('bsc_it', 'B.Sc. Information Technology'), ('bsc_statistics', 'B.Sc. Statistics'), ('bsc_geology', 'B.Sc. Geology'), ('bsc_geography', 'B.Sc. Geography'), ('bcom', 'B.Com'), ('bcom_honours', 'B.Com (Honours)'), ('bba', 'BBA'), ('ba', 'B.A.'), ('ba_english', 'B.A. English'), ('ba_hindi', 'B.A. Hindi'), ('ba_history', 'B.A. History'), ('ba_political_science', 'B.A. Political Science'), ('ba_economics', 'B.A. Economics'), ('ba_sociology', 'B.A. Sociology'), ('ba_psychology', 'B.A. Psychology'), ('ba_philosophy', 'B.A. Philosophy'), ('ba_journalism', 'B.A. Journalism'), ('bca', 'BCA'), ('bcs', 'BCS'), ('llb', 'LLB'), ('bjmc', 'BJMC'), ('bfa', 'BFA'), ('bed', 'B.Ed'), ('bpharm', 'B.Pharm'), ('bds', 'BDS'), ('bhms', 'BHMS'), ('bams', 'BAMS'), ('bnys', 'BNYS'), ('bpt', 'BPT'), ('bvsc', 'BVSc'), ('barch', 'B.Arch'), ('bdes', 'B.Des'), ('bhtm', 'BHTM'), ('bmm', 'BMM'), ('mbbs', 'MBBS'), ('mtech', 'M.Tech'), ('me', 'M.E.'), ('ms', 'M.S.'), ('mba', 'MBA'), ('mba_finance', 'MBA Finance'), ('mba_marketing', 'MBA Marketing'), ('mba_hr', 'MBA HR'), ('mba_operations', 'MBA Operations'), ('mba_it', 'MBA IT'), ('pgdm', 'PGDM'), ('msc', 'M.Sc.'), ('msc_physics', 'M.Sc. Physics'), ('msc_chemistry', 'M.Sc. Chemistry'), ('msc_mathematics', 'M.Sc. Mathematics'), ('msc_biology', 'M.Sc. Biology'), ('msc_cs', 'M.Sc. Computer Science'), ('msc_it', 'M.Sc. Information Technology'), ('msc_biotechnology', 'M.Sc. Biotechnology'), ('msc_statistics', 'M.Sc. Statistics'), ('mcom', 'M.Com'), ('ma', 'M.A.'), ('ma_english', 'M.A. English'), ('ma_hindi', 'M.A. Hindi'), ('ma_history', 'M.A. History'), ('ma_political_science', 'M.A. Political Science'), ('ma_economics', 'M.A. Economics'), ('ma_sociology', 'M.A. Sociology'), ('ma_psychology', 'M.A. Psychology'), ('mca', 'MCA'), ('llm', 'LLM'), ('med', 'M.Ed'), ('mpharm', 'M.Pharm'), ('mds', 'MDS'), ('march', 'M.Arch'), ('mdes', 'M.Des'), ('mjmc', 'MJMC'), ('mfa', 'MFA'), ('mpt', 'MPT'), ('mvsc', 'MVSc'), ('md', 'MD'), ('ms_medical', 'MS (Medical)'), ('dm', 'DM'), ('mch', 'MCh'), ('phd', 'Ph.D'), ('diploma', 'Diploma'), ('polytechnic', 'Polytechnic'), ('iti', 'ITI'), ('12th', '12th Pass'), ('graduation', 'Graduate'), ('postgraduation', 'Post Graduate'), ('other', 'Other')], max_length=50, null=True)),
                ('income', models.DecimalField(blank=True, decimal_places=2, help_text='Annual income in your local currency', max_digits=12, null=True)),
                ('current_company', models.CharField(blank=True, max_length=200, null=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('divorced', 'Divorced'), ('widowed', 'Widowed'), ('separated', 'Separated')], max_length=20, null=True)),
                ('siblings', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(20)])),
                ('caste', models.CharField(blank=True, choices=[('general', 'General'), ('brahmin', 'Brahmin'), ('kshatriya', 'Kshatriya'), ('vaishya', 'Vaishya'), ('kayastha', 'Kayastha'), ('bhumihar', 'Bhumihar'), ('rajput', 'Rajput'), ('baniya', 'Baniya'), ('khatri', 'Khatri'), ('arora', 'Arora'), ('agarwal', 'Agarwal'), ('marwari', 'Marwari'), ('sindhi', 'Sindhi'), ('obc', 'OBC'), ('yadav', 'Yadav'), ('kurmi', 'Kurmi'), ('jat', 'Jat'), ('gujjar', 'Gujjar'), ('ahir', 'Ahir'), ('mali', 'Mali'), ('teli', 'Teli'), ('sonar', 'Sonar'), ('kumhar', 'Kumhar'), ('nai', 'Nai'), ('dhobi', 'Dhobi'), ('sc', 'SC'), ('chamar', 'Chamar'), ('balmiki', 'Balmiki'), ('mahar', 'Mahar'), ('mang', 'Mang'), ('matang', 'Matang'), ('dom', 'Dom'), ('musahar', 'Musahar'), ('st', 'ST'), ('gond', 'Gond'), ('bhil', 'Bhil'), ('santhal', 'Santhal'), ('munda', 'Munda'), ('oraon', 'Oraon'), ('ho', 'Ho'), ('khasi', 'Khasi'), ('garo', 'Garo'), ('reddy', 'Reddy'), ('kamma', 'Kamma'), ('kapu', 'Kapu'), ('nair', 'Nair'), ('menon', 'Menon'), ('iyer', 'Iyer'), ('iyengar', 'Iyengar'), ('naidu', 'Naidu'), ('chettiar', 'Chettiar'), ('pillai', 'Pillai'), ('gounder', 'Gounder'), ('mudaliar', 'Mudaliar'), ('patel', 'Patel'), ('shah', 'Shah'), ('thakkar', 'Thakkar'), ('no_preference', 'No Preference'), ('other', 'Other')], max_length=50, null=True)),
                ('religion', models.CharField(blank=True, choices=[('hinduism', 'Hinduism'), ('islam', 'Islam'), ('christianity', 'Christianity'), ('sikhism', 'Sikhism'), ('buddhism', 'Buddhism'), ('jainism', 'Jainism'), ('zoroastrianism', 'Zoroastrianism'), ('judaism', 'Judaism'), ('bahai', 'Baháʼí Faith'), ('atheist', 'Atheist'), ('agnostic', 'Agnostic'), ('spiritual', 'Spiritual but not religious'), ('other', 'Other')], max_length=50, null=True)),
                ('want_kids', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('maybe', 'Maybe')], max_length=10, null=True)),
                ('open_to_relocate', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('maybe', 'Maybe')], max_length=10, null=True)),
                ('open_to_pets', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('maybe', 'Maybe')], max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('languages_known', models.ManyToManyField(blank=True, help_text='Select languages you know', to='api.language')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
